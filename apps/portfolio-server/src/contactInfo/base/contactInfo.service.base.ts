/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ContactInfo as PrismaContactInfo } from "@prisma/client";

export class ContactInfoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ContactInfoCountArgs, "select">
  ): Promise<number> {
    return this.prisma.contactInfo.count(args);
  }

  async contactInfos<T extends Prisma.ContactInfoFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContactInfoFindManyArgs>
  ): Promise<PrismaContactInfo[]> {
    return this.prisma.contactInfo.findMany<Prisma.ContactInfoFindManyArgs>(
      args
    );
  }
  async contactInfo<T extends Prisma.ContactInfoFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContactInfoFindUniqueArgs>
  ): Promise<PrismaContactInfo | null> {
    return this.prisma.contactInfo.findUnique(args);
  }
  async createContactInfo<T extends Prisma.ContactInfoCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContactInfoCreateArgs>
  ): Promise<PrismaContactInfo> {
    return this.prisma.contactInfo.create<T>(args);
  }
  async updateContactInfo<T extends Prisma.ContactInfoUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContactInfoUpdateArgs>
  ): Promise<PrismaContactInfo> {
    return this.prisma.contactInfo.update<T>(args);
  }
  async deleteContactInfo<T extends Prisma.ContactInfoDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ContactInfoDeleteArgs>
  ): Promise<PrismaContactInfo> {
    return this.prisma.contactInfo.delete(args);
  }
}
